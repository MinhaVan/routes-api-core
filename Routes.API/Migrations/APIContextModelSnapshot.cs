// <auto-generated />
using System;
using Routes.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Routes.API.Migrations
{
    [DbContext(typeof(APIContext))]
    partial class APIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Domain.Models.AjusteAlunoRota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("integer");

                    b.Property<int?>("AlunoRotaAlunoId")
                        .HasColumnType("integer");

                    b.Property<int?>("AlunoRotaRotaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("NovoEnderecoDestinoId")
                        .HasColumnType("integer");

                    b.Property<int?>("NovoEnderecoPartidaId")
                        .HasColumnType("integer");

                    b.Property<int?>("NovoEnderecoRetornoId")
                        .HasColumnType("integer");

                    b.Property<int>("RotaId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NovoEnderecoDestinoId");

                    b.HasIndex("NovoEnderecoPartidaId");

                    b.HasIndex("NovoEnderecoRetornoId");

                    b.HasIndex("AlunoRotaAlunoId", "AlunoRotaRotaId");

                    b.ToTable("ajusteAlunoRota", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.Aluno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CPF")
                        .HasColumnType("text");

                    b.Property<string>("Contato")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<int>("EnderecoDestinoId")
                        .HasColumnType("integer");

                    b.Property<int>("EnderecoPartidaId")
                        .HasColumnType("integer");

                    b.Property<int?>("EnderecoRetornoId")
                        .HasColumnType("integer");

                    b.Property<string>("PrimeiroNome")
                        .HasColumnType("text");

                    b.Property<int>("ResponsavelId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UltimoNome")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EnderecoDestinoId");

                    b.HasIndex("EnderecoPartidaId");

                    b.HasIndex("EnderecoRetornoId");

                    b.HasIndex("ResponsavelId");

                    b.ToTable("Alunos", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.AlunoRota", b =>
                {
                    b.Property<int>("AlunoId")
                        .HasColumnType("integer");

                    b.Property<int>("RotaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("AlunoId", "RotaId");

                    b.HasIndex("RotaId");

                    b.ToTable("Aluno_rota", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.AlunoRotaHistorico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataRealizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EntrouNaVan")
                        .HasColumnType("boolean");

                    b.Property<string>("Observacao")
                        .HasColumnType("text");

                    b.Property<int>("RotaHistoricoId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("RotaHistoricoId");

                    b.ToTable("aluno_rota_historico", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.Assinatura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("integer");

                    b.Property<string>("CopiaCola")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdExterno")
                        .HasColumnType("text");

                    b.Property<string>("Imagem")
                        .HasColumnType("text");

                    b.Property<string>("NumeroCartao")
                        .HasColumnType("text");

                    b.Property<int>("PlanoId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TipoPagamento")
                        .HasColumnType("integer");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Vencimento")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlanoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("assinaturas", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Apelido")
                        .HasColumnType("text");

                    b.Property<string>("CNPJ")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<string>("NomeExibicao")
                        .HasColumnType("text");

                    b.Property<string>("NomeFantasia")
                        .HasColumnType("text");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("empresas", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .HasColumnType("text");

                    b.Property<string>("CEP")
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .HasColumnType("text");

                    b.Property<string>("Complemento")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<bool>("EnderecoPrincipal")
                        .HasColumnType("boolean");

                    b.Property<string>("Estado")
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Numero")
                        .HasColumnType("text");

                    b.Property<string>("Pais")
                        .HasColumnType("text");

                    b.Property<string>("Rua")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TipoEndereco")
                        .HasColumnType("integer");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("endereco", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.LocalizacaoTrajeto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int>("RotaHistoricoId")
                        .HasColumnType("integer");

                    b.Property<int>("RotaId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RotaHistoricoId");

                    b.ToTable("localizacao_trajeto", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.Motorista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CNH")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Foto")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TipoCNH")
                        .HasColumnType("integer");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Vencimento")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("motoristas", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.MotoristaRota", b =>
                {
                    b.Property<int>("MotoristaId")
                        .HasColumnType("integer");

                    b.Property<int>("RotaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("MotoristaId", "RotaId");

                    b.HasIndex("RotaId");

                    b.ToTable("motorista_rota", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.OrdemTrajeto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlunoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RotaId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("RotaId");

                    b.ToTable("ordem_trajeto", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.OrdemTrajetoMarcador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("integer");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int>("OrdemTrajetoId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TipoMarcador")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrdemTrajetoId");

                    b.ToTable("ordem_trajeto_marcador", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.Pagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssinaturaExternal")
                        .HasColumnType("text");

                    b.Property<int>("AssinaturaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataPagamento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataVencimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FaturaURL")
                        .HasColumnType("text");

                    b.Property<string>("NumeroFatura")
                        .HasColumnType("text");

                    b.Property<string>("PagamentoIdExternal")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("StatusPagamento")
                        .HasColumnType("integer");

                    b.Property<string>("TipoFaturamento")
                        .HasColumnType("text");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AssinaturaId");

                    b.ToTable("pagamentos", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.Permissao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<bool>("EditarPlanos")
                        .HasColumnType("boolean");

                    b.Property<bool>("EditarVeiculos")
                        .HasColumnType("boolean");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<bool>("PadraoMotorista")
                        .HasColumnType("boolean");

                    b.Property<bool>("PadraoPassageiros")
                        .HasColumnType("boolean");

                    b.Property<bool>("PadraoResponsavel")
                        .HasColumnType("boolean");

                    b.Property<bool>("PadraoSuporte")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("permissoes", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.Plano", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("plano", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.Rota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DiaSemana")
                        .HasColumnType("integer");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<int?>("EnderecoId")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("Horario")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TipoRota")
                        .HasColumnType("integer");

                    b.Property<int?>("VeiculoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("rota", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.RotaHistorico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataRealizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EmAndamento")
                        .HasColumnType("boolean");

                    b.Property<int>("RotaId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TipoRota")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RotaId");

                    b.ToTable("rota_historico", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CPF")
                        .HasColumnType("text");

                    b.Property<string>("ClientIdPaymentGateway")
                        .HasColumnType("text");

                    b.Property<string>("Contato")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<int?>("EnderecoPrincipalId")
                        .HasColumnType("integer");

                    b.Property<int>("Perfil")
                        .HasColumnType("integer");

                    b.Property<int?>("PlanoId")
                        .HasColumnType("integer");

                    b.Property<string>("PrimeiroNome")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Senha")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UltimoNome")
                        .HasColumnType("text");

                    b.Property<bool>("UsuarioValidado")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EnderecoPrincipalId");

                    b.HasIndex("PlanoId");

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.UsuarioPermissao", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissaoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("UsuarioId", "PermissaoId");

                    b.HasIndex("PermissaoId");

                    b.ToTable("usuario_permissao", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.Veiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Ano")
                        .HasColumnType("integer");

                    b.Property<int>("AnoModelo")
                        .HasColumnType("integer");

                    b.Property<string>("Cor")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<string>("Marca")
                        .HasColumnType("text");

                    b.Property<string>("Modelo")
                        .HasColumnType("text");

                    b.Property<string>("Placa")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TipoVeiculo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("veiculos", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.AjusteAlunoRota", b =>
                {
                    b.HasOne("Core.Domain.Models.Endereco", "EnderecoDestino")
                        .WithMany("AjusteAlunoRotasDestino")
                        .HasForeignKey("NovoEnderecoDestinoId");

                    b.HasOne("Core.Domain.Models.Endereco", "EnderecoPartida")
                        .WithMany("AjusteAlunoRotasPartida")
                        .HasForeignKey("NovoEnderecoPartidaId");

                    b.HasOne("Core.Domain.Models.Endereco", "EnderecoRetorno")
                        .WithMany("AjusteAlunoRotasRetorno")
                        .HasForeignKey("NovoEnderecoRetornoId");

                    b.HasOne("Core.Domain.Models.AlunoRota", null)
                        .WithMany("AjusteAlunoRotas")
                        .HasForeignKey("AlunoRotaAlunoId", "AlunoRotaRotaId");

                    b.Navigation("EnderecoDestino");

                    b.Navigation("EnderecoPartida");

                    b.Navigation("EnderecoRetorno");
                });

            modelBuilder.Entity("Core.Domain.Models.Aluno", b =>
                {
                    b.HasOne("Core.Domain.Models.Empresa", "Empresa")
                        .WithMany("Alunos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.Endereco", "EnderecoDestino")
                        .WithMany("EnderecosDestinos")
                        .HasForeignKey("EnderecoDestinoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.Endereco", "EnderecoPartida")
                        .WithMany("EnderecosPartidas")
                        .HasForeignKey("EnderecoPartidaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.Endereco", "EnderecoRetorno")
                        .WithMany("EnderecosRetornos")
                        .HasForeignKey("EnderecoRetornoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Domain.Models.Usuario", "Responsavel")
                        .WithMany("Alunos")
                        .HasForeignKey("ResponsavelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("EnderecoDestino");

                    b.Navigation("EnderecoPartida");

                    b.Navigation("EnderecoRetorno");

                    b.Navigation("Responsavel");
                });

            modelBuilder.Entity("Core.Domain.Models.AlunoRota", b =>
                {
                    b.HasOne("Core.Domain.Models.Aluno", "Aluno")
                        .WithMany("AlunoRotas")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.Rota", "Rota")
                        .WithMany("AlunoRotas")
                        .HasForeignKey("RotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Rota");
                });

            modelBuilder.Entity("Core.Domain.Models.AlunoRotaHistorico", b =>
                {
                    b.HasOne("Core.Domain.Models.Aluno", "Aluno")
                        .WithMany("AlunoRotaHistoricos")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.RotaHistorico", "RotaHistorico")
                        .WithMany("AlunoRotaHistorico")
                        .HasForeignKey("RotaHistoricoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("RotaHistorico");
                });

            modelBuilder.Entity("Core.Domain.Models.Assinatura", b =>
                {
                    b.HasOne("Core.Domain.Models.Plano", "Plano")
                        .WithMany("Assinaturas")
                        .HasForeignKey("PlanoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.Usuario", "Usuario")
                        .WithMany("Assinaturas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plano");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Core.Domain.Models.Endereco", b =>
                {
                    b.HasOne("Core.Domain.Models.Empresa", "Empresa")
                        .WithMany("Enderecos")
                        .HasForeignKey("EmpresaId");

                    b.HasOne("Core.Domain.Models.Usuario", "Usuario")
                        .WithMany("Enderecos")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Empresa");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Core.Domain.Models.LocalizacaoTrajeto", b =>
                {
                    b.HasOne("Core.Domain.Models.RotaHistorico", "RotaHistorico")
                        .WithMany("LocalizacaoTrajeto")
                        .HasForeignKey("RotaHistoricoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RotaHistorico");
                });

            modelBuilder.Entity("Core.Domain.Models.Motorista", b =>
                {
                    b.HasOne("Core.Domain.Models.Usuario", "Usuario")
                        .WithOne("Motorista")
                        .HasForeignKey("Core.Domain.Models.Motorista", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Core.Domain.Models.MotoristaRota", b =>
                {
                    b.HasOne("Core.Domain.Models.Motorista", "Motorista")
                        .WithMany("MotoristaRotas")
                        .HasForeignKey("MotoristaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.Rota", "Rota")
                        .WithMany("MotoristaRotas")
                        .HasForeignKey("RotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motorista");

                    b.Navigation("Rota");
                });

            modelBuilder.Entity("Core.Domain.Models.OrdemTrajeto", b =>
                {
                    b.HasOne("Core.Domain.Models.Aluno", null)
                        .WithMany("OrdemTrajetos")
                        .HasForeignKey("AlunoId");

                    b.HasOne("Core.Domain.Models.Rota", "Rota")
                        .WithMany("OrdemTrajetos")
                        .HasForeignKey("RotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rota");
                });

            modelBuilder.Entity("Core.Domain.Models.OrdemTrajetoMarcador", b =>
                {
                    b.HasOne("Core.Domain.Models.OrdemTrajeto", "OrdemTrajeto")
                        .WithMany("Marcadores")
                        .HasForeignKey("OrdemTrajetoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrdemTrajeto");
                });

            modelBuilder.Entity("Core.Domain.Models.Pagamento", b =>
                {
                    b.HasOne("Core.Domain.Models.Assinatura", "Assinatura")
                        .WithMany("Pagamentos")
                        .HasForeignKey("AssinaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assinatura");
                });

            modelBuilder.Entity("Core.Domain.Models.Plano", b =>
                {
                    b.HasOne("Core.Domain.Models.Empresa", "Empresa")
                        .WithMany("Planos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Core.Domain.Models.Rota", b =>
                {
                    b.HasOne("Core.Domain.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.Endereco", null)
                        .WithMany("Rotas")
                        .HasForeignKey("EnderecoId");

                    b.HasOne("Core.Domain.Models.Veiculo", "Veiculo")
                        .WithMany("Rotas")
                        .HasForeignKey("VeiculoId");

                    b.Navigation("Empresa");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("Core.Domain.Models.RotaHistorico", b =>
                {
                    b.HasOne("Core.Domain.Models.Rota", "Rota")
                        .WithMany("Historicos")
                        .HasForeignKey("RotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rota");
                });

            modelBuilder.Entity("Core.Domain.Models.Usuario", b =>
                {
                    b.HasOne("Core.Domain.Models.Empresa", "Empresa")
                        .WithMany("Usuarios")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.Endereco", "EnderecoPrincipal")
                        .WithMany()
                        .HasForeignKey("EnderecoPrincipalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Domain.Models.Plano", "Plano")
                        .WithMany("Usuarios")
                        .HasForeignKey("PlanoId");

                    b.Navigation("Empresa");

                    b.Navigation("EnderecoPrincipal");

                    b.Navigation("Plano");
                });

            modelBuilder.Entity("Core.Domain.Models.UsuarioPermissao", b =>
                {
                    b.HasOne("Core.Domain.Models.Permissao", "Permissao")
                        .WithMany("Usuarios")
                        .HasForeignKey("PermissaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.Usuario", "Usuario")
                        .WithMany("Permissoes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permissao");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Core.Domain.Models.Veiculo", b =>
                {
                    b.HasOne("Core.Domain.Models.Empresa", "Empresa")
                        .WithMany("Veiculos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Core.Domain.Models.Aluno", b =>
                {
                    b.Navigation("AlunoRotaHistoricos");

                    b.Navigation("AlunoRotas");

                    b.Navigation("OrdemTrajetos");
                });

            modelBuilder.Entity("Core.Domain.Models.AlunoRota", b =>
                {
                    b.Navigation("AjusteAlunoRotas");
                });

            modelBuilder.Entity("Core.Domain.Models.Assinatura", b =>
                {
                    b.Navigation("Pagamentos");
                });

            modelBuilder.Entity("Core.Domain.Models.Empresa", b =>
                {
                    b.Navigation("Alunos");

                    b.Navigation("Enderecos");

                    b.Navigation("Planos");

                    b.Navigation("Usuarios");

                    b.Navigation("Veiculos");
                });

            modelBuilder.Entity("Core.Domain.Models.Endereco", b =>
                {
                    b.Navigation("AjusteAlunoRotasDestino");

                    b.Navigation("AjusteAlunoRotasPartida");

                    b.Navigation("AjusteAlunoRotasRetorno");

                    b.Navigation("EnderecosDestinos");

                    b.Navigation("EnderecosPartidas");

                    b.Navigation("EnderecosRetornos");

                    b.Navigation("Rotas");
                });

            modelBuilder.Entity("Core.Domain.Models.Motorista", b =>
                {
                    b.Navigation("MotoristaRotas");
                });

            modelBuilder.Entity("Core.Domain.Models.OrdemTrajeto", b =>
                {
                    b.Navigation("Marcadores");
                });

            modelBuilder.Entity("Core.Domain.Models.Permissao", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Core.Domain.Models.Plano", b =>
                {
                    b.Navigation("Assinaturas");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Core.Domain.Models.Rota", b =>
                {
                    b.Navigation("AlunoRotas");

                    b.Navigation("Historicos");

                    b.Navigation("MotoristaRotas");

                    b.Navigation("OrdemTrajetos");
                });

            modelBuilder.Entity("Core.Domain.Models.RotaHistorico", b =>
                {
                    b.Navigation("AlunoRotaHistorico");

                    b.Navigation("LocalizacaoTrajeto");
                });

            modelBuilder.Entity("Core.Domain.Models.Usuario", b =>
                {
                    b.Navigation("Alunos");

                    b.Navigation("Assinaturas");

                    b.Navigation("Enderecos");

                    b.Navigation("Motorista");

                    b.Navigation("Permissoes");
                });

            modelBuilder.Entity("Core.Domain.Models.Veiculo", b =>
                {
                    b.Navigation("Rotas");
                });
#pragma warning restore 612, 618
        }
    }
}
