// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Routes.Data.Context;

#nullable disable

namespace Routes.API.Migrations
{
    [DbContext(typeof(APIContext))]
    [Migration("20250619213956_addCampoOrdem")]
    partial class addCampoOrdem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Routes.Domain.Models.AjusteAlunoRota", b =>
                {
                    b.Property<int>("AlunoId")
                        .HasColumnType("integer");

                    b.Property<int>("RotaId")
                        .HasColumnType("integer");

                    b.Property<int?>("AlunoRotaAlunoId")
                        .HasColumnType("integer");

                    b.Property<int?>("AlunoRotaRotaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("NovoEnderecoDestinoId")
                        .HasColumnType("integer");

                    b.Property<int?>("NovoEnderecoPartidaId")
                        .HasColumnType("integer");

                    b.Property<int?>("NovoEnderecoRetornoId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("AlunoId", "RotaId");

                    b.HasIndex("NovoEnderecoDestinoId");

                    b.HasIndex("NovoEnderecoPartidaId");

                    b.HasIndex("NovoEnderecoRetornoId");

                    b.HasIndex("AlunoRotaAlunoId", "AlunoRotaRotaId");

                    b.ToTable("ajusteAlunoRota", (string)null);
                });

            modelBuilder.Entity("Routes.Domain.Models.AlunoRota", b =>
                {
                    b.Property<int>("AlunoId")
                        .HasColumnType("integer");

                    b.Property<int>("RotaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("AlunoId", "RotaId");

                    b.HasIndex("RotaId");

                    b.ToTable("alunoRota", (string)null);
                });

            modelBuilder.Entity("Routes.Domain.Models.AlunoRotaHistorico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataRealizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EntrouNaVan")
                        .HasColumnType("boolean");

                    b.Property<string>("Observacao")
                        .HasColumnType("text");

                    b.Property<int>("RotaHistoricoId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RotaHistoricoId");

                    b.ToTable("alunoRotaHistorico", (string)null);
                });

            modelBuilder.Entity("Routes.Domain.Models.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .HasColumnType("text");

                    b.Property<string>("CEP")
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .HasColumnType("text");

                    b.Property<string>("Complemento")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<bool>("EnderecoPrincipal")
                        .HasColumnType("boolean");

                    b.Property<string>("Estado")
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Numero")
                        .HasColumnType("text");

                    b.Property<string>("Pais")
                        .HasColumnType("text");

                    b.Property<string>("Rua")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TipoEndereco")
                        .HasColumnType("integer");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("endereco", (string)null);
                });

            modelBuilder.Entity("Routes.Domain.Models.LocalizacaoTrajeto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int>("RotaHistoricoId")
                        .HasColumnType("integer");

                    b.Property<int>("RotaId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RotaHistoricoId");

                    b.ToTable("localizacaoTrajeto", (string)null);
                });

            modelBuilder.Entity("Routes.Domain.Models.MotoristaRota", b =>
                {
                    b.Property<int>("MotoristaId")
                        .HasColumnType("integer");

                    b.Property<int>("RotaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("MotoristaId", "RotaId");

                    b.HasIndex("RotaId");

                    b.ToTable("motoristaRota", (string)null);
                });

            modelBuilder.Entity("Routes.Domain.Models.OrdemTrajeto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RotaId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RotaId");

                    b.ToTable("ordemTrajeto", (string)null);
                });

            modelBuilder.Entity("Routes.Domain.Models.OrdemTrajetoMarcador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("integer");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int>("Ordem")
                        .HasColumnType("integer");

                    b.Property<int>("OrdemTrajetoId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TipoMarcador")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrdemTrajetoId");

                    b.ToTable("ordemTrajetoMarcador", (string)null);
                });

            modelBuilder.Entity("Routes.Domain.Models.Rota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DiaSemana")
                        .HasColumnType("integer");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<int?>("EnderecoId")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("Horario")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TipoRota")
                        .HasColumnType("integer");

                    b.Property<int?>("VeiculoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("rota", (string)null);
                });

            modelBuilder.Entity("Routes.Domain.Models.RotaHistorico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataRealizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EmAndamento")
                        .HasColumnType("boolean");

                    b.Property<int>("RotaId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TipoRota")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RotaId");

                    b.ToTable("rotaHistorico", (string)null);
                });

            modelBuilder.Entity("Routes.Domain.Models.Veiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Ano")
                        .HasColumnType("integer");

                    b.Property<int>("AnoModelo")
                        .HasColumnType("integer");

                    b.Property<string>("Cor")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<string>("Marca")
                        .HasColumnType("text");

                    b.Property<string>("Modelo")
                        .HasColumnType("text");

                    b.Property<string>("Placa")
                        .HasColumnType("text");

                    b.Property<int>("QuantidadePessoasSuportada")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TipoVeiculo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("veiculo", (string)null);
                });

            modelBuilder.Entity("Routes.Domain.Models.AjusteAlunoRota", b =>
                {
                    b.HasOne("Routes.Domain.Models.Endereco", "EnderecoDestino")
                        .WithMany("AjusteAlunoRotasDestino")
                        .HasForeignKey("NovoEnderecoDestinoId");

                    b.HasOne("Routes.Domain.Models.Endereco", "EnderecoPartida")
                        .WithMany("AjusteAlunoRotasPartida")
                        .HasForeignKey("NovoEnderecoPartidaId");

                    b.HasOne("Routes.Domain.Models.Endereco", "EnderecoRetorno")
                        .WithMany("AjusteAlunoRotasRetorno")
                        .HasForeignKey("NovoEnderecoRetornoId");

                    b.HasOne("Routes.Domain.Models.AlunoRota", null)
                        .WithMany("AjusteAlunoRotas")
                        .HasForeignKey("AlunoRotaAlunoId", "AlunoRotaRotaId");

                    b.Navigation("EnderecoDestino");

                    b.Navigation("EnderecoPartida");

                    b.Navigation("EnderecoRetorno");
                });

            modelBuilder.Entity("Routes.Domain.Models.AlunoRota", b =>
                {
                    b.HasOne("Routes.Domain.Models.Rota", "Rota")
                        .WithMany("AlunoRotas")
                        .HasForeignKey("RotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rota");
                });

            modelBuilder.Entity("Routes.Domain.Models.AlunoRotaHistorico", b =>
                {
                    b.HasOne("Routes.Domain.Models.RotaHistorico", "RotaHistorico")
                        .WithMany("AlunoRotaHistorico")
                        .HasForeignKey("RotaHistoricoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RotaHistorico");
                });

            modelBuilder.Entity("Routes.Domain.Models.LocalizacaoTrajeto", b =>
                {
                    b.HasOne("Routes.Domain.Models.RotaHistorico", "RotaHistorico")
                        .WithMany("LocalizacaoTrajeto")
                        .HasForeignKey("RotaHistoricoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RotaHistorico");
                });

            modelBuilder.Entity("Routes.Domain.Models.MotoristaRota", b =>
                {
                    b.HasOne("Routes.Domain.Models.Rota", "Rota")
                        .WithMany("MotoristaRotas")
                        .HasForeignKey("RotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rota");
                });

            modelBuilder.Entity("Routes.Domain.Models.OrdemTrajeto", b =>
                {
                    b.HasOne("Routes.Domain.Models.Rota", "Rota")
                        .WithMany("OrdemTrajetos")
                        .HasForeignKey("RotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rota");
                });

            modelBuilder.Entity("Routes.Domain.Models.OrdemTrajetoMarcador", b =>
                {
                    b.HasOne("Routes.Domain.Models.OrdemTrajeto", "OrdemTrajeto")
                        .WithMany("Marcadores")
                        .HasForeignKey("OrdemTrajetoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrdemTrajeto");
                });

            modelBuilder.Entity("Routes.Domain.Models.Rota", b =>
                {
                    b.HasOne("Routes.Domain.Models.Endereco", null)
                        .WithMany("Rotas")
                        .HasForeignKey("EnderecoId");

                    b.HasOne("Routes.Domain.Models.Veiculo", "Veiculo")
                        .WithMany("Rotas")
                        .HasForeignKey("VeiculoId");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("Routes.Domain.Models.RotaHistorico", b =>
                {
                    b.HasOne("Routes.Domain.Models.Rota", "Rota")
                        .WithMany("Historicos")
                        .HasForeignKey("RotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rota");
                });

            modelBuilder.Entity("Routes.Domain.Models.AlunoRota", b =>
                {
                    b.Navigation("AjusteAlunoRotas");
                });

            modelBuilder.Entity("Routes.Domain.Models.Endereco", b =>
                {
                    b.Navigation("AjusteAlunoRotasDestino");

                    b.Navigation("AjusteAlunoRotasPartida");

                    b.Navigation("AjusteAlunoRotasRetorno");

                    b.Navigation("Rotas");
                });

            modelBuilder.Entity("Routes.Domain.Models.OrdemTrajeto", b =>
                {
                    b.Navigation("Marcadores");
                });

            modelBuilder.Entity("Routes.Domain.Models.Rota", b =>
                {
                    b.Navigation("AlunoRotas");

                    b.Navigation("Historicos");

                    b.Navigation("MotoristaRotas");

                    b.Navigation("OrdemTrajetos");
                });

            modelBuilder.Entity("Routes.Domain.Models.RotaHistorico", b =>
                {
                    b.Navigation("AlunoRotaHistorico");

                    b.Navigation("LocalizacaoTrajeto");
                });

            modelBuilder.Entity("Routes.Domain.Models.Veiculo", b =>
                {
                    b.Navigation("Rotas");
                });
#pragma warning restore 612, 618
        }
    }
}
